# Generated by Django 5.2.4 on 2025-07-18 03:10

from django.db import migrations


def copy_data_from_payment_app(apps, schema_editor):
    """Copy data from payment app tables to orders app tables"""
    # Get models from payment app (old models)
    PaymentOrder = apps.get_model('payment', 'Order')
    PaymentOrderItem = apps.get_model('payment', 'OrderItem')
    PaymentShippingMethod = apps.get_model('payment', 'ShippingMethod')
    PaymentCoupon = apps.get_model('payment', 'Coupon')
    PaymentOrderCoupon = apps.get_model('payment', 'OrderCoupon')
    
    # Get models from orders app (new models)
    OrdersOrder = apps.get_model('orders', 'Order')
    OrdersOrderItem = apps.get_model('orders', 'OrderItem')
    OrdersShippingMethod = apps.get_model('orders', 'ShippingMethod')
    OrdersCoupon = apps.get_model('orders', 'Coupon')
    OrdersOrderCoupon = apps.get_model('orders', 'OrderCoupon')
    
    # Copy shipping methods
    for shipping_method in PaymentShippingMethod.objects.all():
        OrdersShippingMethod.objects.create(
            name=shipping_method.name,
            description=shipping_method.description,
            cost=shipping_method.cost,
            estimated_days=shipping_method.estimated_days,
            is_active=shipping_method.is_active,
            created_at=shipping_method.created_at,
        )
    
    # Copy coupons
    for coupon in PaymentCoupon.objects.all():
        OrdersCoupon.objects.create(
            code=coupon.code,
            discount_type=coupon.discount_type,
            discount_value=coupon.discount_value,
            minimum_amount=coupon.minimum_amount,
            maximum_uses=coupon.maximum_uses,
            used_count=coupon.used_count,
            valid_from=coupon.valid_from,
            valid_to=coupon.valid_to,
            is_active=coupon.is_active,
            created_at=coupon.created_at,
        )
    
    # Copy orders
    for order in PaymentOrder.objects.all():
        new_order = OrdersOrder.objects.create(
            id=order.id,  # Keep the same ID
            order_id=order.order_id,
            user=order.user,
            status=order.status,
            first_name=order.first_name,
            last_name=order.last_name,
            email=order.email,
            phone=order.phone,
            shipping_address=order.shipping_address,
            shipping_city=order.shipping_city,
            shipping_state=order.shipping_state,
            shipping_postal_code=order.shipping_postal_code,
            shipping_country=order.shipping_country,
            total_amount=order.total_amount,
            shipping_cost=order.shipping_cost,
            tax_amount=order.tax_amount,
            created_at=order.created_at,
            updated_at=order.updated_at,
            order_notes=order.order_notes,
        )
        
        # Copy order items
        for item in PaymentOrderItem.objects.filter(order=order):
            OrdersOrderItem.objects.create(
                order=new_order,
                product=item.product,
                quantity=item.quantity,
                price=item.price,
                created_at=item.created_at,
            )
    
    # Copy order coupons
    for order_coupon in PaymentOrderCoupon.objects.all():
        new_order = OrdersOrder.objects.get(id=order_coupon.order.id)
        new_coupon = OrdersCoupon.objects.get(code=order_coupon.coupon.code)
        OrdersOrderCoupon.objects.create(
            order=new_order,
            coupon=new_coupon,
            discount_amount=order_coupon.discount_amount,
            created_at=order_coupon.created_at,
        )


def reverse_copy_data(apps, schema_editor):
    """Reverse migration - clear orders app data"""
    OrdersOrder = apps.get_model('orders', 'Order')
    OrdersOrderItem = apps.get_model('orders', 'OrderItem')
    OrdersShippingMethod = apps.get_model('orders', 'ShippingMethod')
    OrdersCoupon = apps.get_model('orders', 'Coupon')
    OrdersOrderCoupon = apps.get_model('orders', 'OrderCoupon')
    
    # Clear all data
    OrdersOrderCoupon.objects.all().delete()
    OrdersOrderItem.objects.all().delete()
    OrdersOrder.objects.all().delete()
    OrdersCoupon.objects.all().delete()
    OrdersShippingMethod.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0001_initial'),
        ('payment', '0002_alter_payment_payment_method'),
    ]

    operations = [
        migrations.RunPython(copy_data_from_payment_app, reverse_copy_data),
    ]
